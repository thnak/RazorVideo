@using global::RazorVideo.Helper
@using JsonSerializer = Newtonsoft.Json.JsonSerializer
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<MudPaper Elevation="0" Height="@Height" Width="@Width" Class="@(Class + " ytd-player relative d-flex align-center justify-center")"
          @onclick="@(async () => await Onclick())" id="@_rootUuid">
    <div class="html5-video-container">
        <video id="@Uuid" controlslist="nodownload" poster="@Sources.Poster"
               @ontimeupdate="@OnTimeUpdate" @onloadeddata="@OnLoadedData" @onended="@OneEnded">
            @for (int i = 0; i < Sources.Sources!.Length; i++)
            {
                <source src="@Sources.Sources[i]" type="@Sources.types[i]">
            }
            Your browser does not support the video tag.
        </video>
    </div>
    @ChildContent
</MudPaper>

@code {

    #region Properties

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public required Media Sources { get; set; }

    [Parameter]
    public EventCallback<Media> SourcesChanged { get; set; }

    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public Media[]? PlayList { get; set; }

    [Parameter]
    public string? Width { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private string? Uuid { get; set; }
    private readonly string _rootUuid = Guid.NewGuid().ToString().Replace("-", "_");

    private IJSObjectReference? _jsModule;

    private readonly Setting _setting = new();

    #endregion

    #region VideoEventListener

    private async Task Onclick()
    {
        if (_setting.IsPlaying) await Pause();
        else
        {
            await Play();
        }
    }

    private async Task OnTimeUpdate()
    {
        await GetVideoInfo();
    }

    private async Task OnLoadedData()
    {
        await GetVideoInfo();
    }

    private Task OneEnded()
    {
        _setting.IsPlaying = false;
        return Task.CompletedTask;
    }

    public async Task Pause()
    {
        if (_jsModule != null) await _jsModule.InvokeVoidAsync("videoEvents", $"{Uuid}", "pause");
        _setting.IsPlaying = false;
    }

    public async Task Play()
    {
        if (_jsModule != null) await _jsModule.InvokeVoidAsync("videoEvents", $"{Uuid}", "play");
        _setting.IsPlaying = true;
    }

    private async Task GetVideoInfo()
    {
        if (_jsModule is not null)
        {
            string info = await _jsModule.InvokeAsync<string>("videoInfo", Uuid);
            if (info.Length > 0)
            {
                Media? media = JsonConvert.DeserializeObject<Media>(info);
                if (media != null)
                {
                    Sources = media;
                    await SourcesChanged.InvokeAsync(media);
                }
            }
        }
    }

    #endregion

    #region ComponentHandler
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Uuid ??= Guid.NewGuid().ToString();
            _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/RazorVideo/RzVideo.razor.js");
            await _jsModule.InvokeVoidAsync("DOMCleanup.createObserver", _rootUuid);
            if (PlayList is not null)
            {
                Sources = PlayList.First();
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_jsModule is not null)
        {
            await _jsModule.DisposeAsync();
        }
    }

    #endregion

}